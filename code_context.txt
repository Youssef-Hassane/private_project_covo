// File: components/authorized/messages/Message.components.tsx
"use client"
import * as React from "react"
import { Label } from "@/components/ui/label"
import { Sidebar, SidebarHeader, SidebarInput } from "@/components/ui/sidebar"
import { Switch } from "@/components/ui/switch"
import { data } from "./Message.date"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Send } from 'lucide-react';



export default function MessagesComponent() {
  const [chats, setChats] = React.useState(data.chats)

  return (
    <div className="md:flex " >


      <Sidebar collapsible="none" className="w-full 
         md:flex md:w-[400px]">
        <SidebarHeader className="gap-3.5 border-b p-4">
          <div className="flex w-full items-center justify-between">
            <div className="text-base font-medium text-foreground">
              Messages
            </div>
            <Label className="flex items-center gap-2 text-sm">
              <span>Unreads</span>
              <Switch className="shadow-none" />
            </Label>
          </div>
          <SidebarInput placeholder="Type to search..." />
        </SidebarHeader>
        <div>
          <ScrollArea className="h-[calc(100vh-167px)]">
            <div className="px-0">

              <div>
                {chats.map((chat) => (
                  <a
                    href="#"
                    key={chat.email}
                    className="flex flex-col items-start gap-2 whitespace-nowrap border-b p-4 text-sm leading-tight last:border-b-0 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"
                  >
                    <div className="flex w-full items-center gap-2">
                      <span>{chat.name}</span>{" "}
                      <span className="ml-auto text-xs">{chat.date}</span>
                    </div>
                    <span className="font-medium">{chat.subject}</span>
                    <span className="line-clamp-2 w-[260px] whitespace-break-spaces text-xs">
                      {chat.teaser}
                    </span>
                  </a>
                ))}
              </div>
            </div>
          </ScrollArea>
        </div>
      </Sidebar>
      <div className=" w-full h-[calc(100vh-64px)] bg-red-300">
        <ScrollArea className="h-[calc(100vh-129px)]">
          
        </ScrollArea>
        <div className="flex w-full h-[65px] items-end space-x-2 p-3 border-t-2 border-sidebar-border bg-sidebar">
          <Input className="h-full" type="Message" placeholder="Message" />
          <Button className="h-full" type="submit"><Send/>Send</Button>
        </div>
      </div>
    </div>
  )
}

// File: components/authorized/messages/Message.date.tsx

export const data = {
  user: {
    name: "shadcn",
    email: "m@example.com",
    avatar: "/avatars/shadcn.jpg",
  },
  chats: [
    {
      name: "William Smith",
      email: "williamsmith@example.com",
      subject: "Meeting Tomorrow",
      date: "09:34 AM",
      teaser:
        "Hi team, just a reminder about our meeting tomorrow at 10 AM.\nPlease come prepared with your project updates.",
    },
    {
      name: "Alice Smith",
      email: "alicesmith@example.com",
      subject: "Re: Project Update",
      date: "Yesterday",
      teaser:
        "Thanks for the update. The progress looks great so far.\nLet's schedule a call to discuss the next steps.",
    },
    {
      name: "Bob Johnson",
      email: "bobjohnson@example.com",
      subject: "Weekend Plans",
      date: "2 days ago",
      teaser:
        "Hey everyone! I'm thinking of organizing a team outing this weekend.\nWould you be interested in a hiking trip or a beach day?",
    },
    {
      name: "Emily Davis",
      email: "emilydavis@example.com",
      subject: "Re: Question about Budget",
      date: "2 days ago",
      teaser:
        "I've reviewed the budget numbers you sent over.\nCan we set up a quick call to discuss some potential adjustments?",
    },
    {
      name: "Michael Wilson",
      email: "michaelwilson@example.com",
      subject: "Important Announcement",
      date: "1 week ago",
      teaser:
        "Please join us for an all-hands meeting this Friday at 3 PM.\nWe have some exciting news to share about the company's future.",
    },
    {
      name: "Sarah Brown",
      email: "sarahbrown@example.com",
      subject: "Re: Feedback on Proposal",
      date: "1 week ago",
      teaser:
        "Thank you for sending over the proposal. I've reviewed it and have some thoughts.\nCould we schedule a meeting to discuss my feedback in detail?",
    },
    {
      name: "David Lee",
      email: "davidlee@example.com",
      subject: "New Project Idea",
      date: "1 week ago",
      teaser:
        "I've been brainstorming and came up with an interesting project concept.\nDo you have time this week to discuss its potential impact and feasibility?",
    },
    {
      name: "Olivia Wilson",
      email: "oliviawilson@example.com",
      subject: "Vacation Plans",
      date: "1 week ago",
      teaser:
        "Just a heads up that I'll be taking a two-week vacation next month.\nI'll make sure all my projects are up to date before I leave.",
    },
    {
      name: "James Martin",
      email: "jamesmartin@example.com",
      subject: "Re: Conference Registration",
      date: "1 week ago",
      teaser:
        "I've completed the registration for the upcoming tech conference.\nLet me know if you need any additional information from my end.",
    },
    {
      name: "Sophia White",
      email: "sophiawhite@example.com",
      subject: "Team Dinner",
      date: "1 week ago",
      teaser:
        "To celebrate our recent project success, I'd like to organize a team dinner.\nAre you available next Friday evening? Please let me know your preferences.",
    },

  ],
  

}
 
// File: components/authorized/side-bar/SideBar.component.tsx
import { AppSidebar } from "@/components/authorized/side-bar/app-sidebar/app-sidebar"
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from "@/components/ui/breadcrumb"
import { Separator } from "@/components/ui/separator"
import { SidebarInset, SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"

import { ReactNode } from "react";

export function SideBarLayout({ children }: { children: ReactNode }) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className=" flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12 z-50 bg-sidebar border-b-2 border-sidebar-border">
          <div className="flex items-center gap-2 px-4 fixed w-full h-16  group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12 z-50 bg-sidebar border-b-2 border-sidebar-border">
            <SidebarTrigger className="-ml-1" />
            <Separator orientation="vertical" className="mr-2 h-4" />
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem className="hidden md:block">
                  <BreadcrumbLink href="#">
                    COVO
                  </BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator className="hidden md:block" />
                <BreadcrumbItem>
                  <BreadcrumbPage>Home</BreadcrumbPage>
                </BreadcrumbItem>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
        </header>
        { children }
      </SidebarInset>
    </SidebarProvider>
  )
}

// File: components/authorized/side-bar/app-sidebar/app-sidebar.data.ts
import { AudioWaveform, SwatchBook, User, Command, Frame, GalleryVerticalEnd, Map, PieChart, Search, House } from "lucide-react"

export const data = {
  user: {
    name: "shadcn",
    email: "m@example.com",
    avatar: "/avatars/shadcn.jpg",
  },
  teams: [
    {
      name: "COVO",
      logo: GalleryVerticalEnd,
      plan: "Enterprise",
    },
    {
      name: "Acme Corp.",
      logo: AudioWaveform,
      plan: "Startup",
    },
    {
      name: "Evil Corp.",
      logo: Command,
      plan: "Free",
    },
  ],
  navMain: [
    {
      title: "HOME",
      url: "#",
      icon: House,
      isActive: true,
      items: [
        {
          title: "Active Campaigns",
          url: "#",
        },
        {
          title: "Notifications",
          url: "#",
        },
        {
          title: "Recent Messages",
          url: "/messages",
        },
        {
          title: "Upcoming Tasks",
          url: "#",
        },
      ],
    },
    {
      title: "DISCOVER",
      url: "#",
      icon: Search,
      items: [
        {
          title: "Genesis",
          url: "#",
        },
        {
          title: "Explorer",
          url: "#",
        },
        {
          title: "Quantum",
          url: "#",
        },
      ],
    },
    {
      title: "MY MATCHES",
      url: "#",
      icon: SwatchBook,
      items: [
        {
          title: "Introduction",
          url: "#",
        },
        {
          title: "Get Started",
          url: "#",
        },
        {
          title: "Tutorials",
          url: "#",
        },
        {
          title: "Changelog",
          url: "#",
        },
      ],
    },
    {
      title: "MY PROFILE",
      url: "#",
      icon: User,
      items: [
        {
          title: "General",
          url: "#",
        },
        {
          title: "Team",
          url: "#",
        },
        {
          title: "Billing",
          url: "#",
        },
        {
          title: "Limits",
          url: "#",
        },
      ],
    },
  ],
  projects: [
    {
      name: "Design Engineering",
      url: "#",
      icon: Frame,
    },
    {
      name: "Sales & Marketing",
      url: "#",
      icon: PieChart,
    },
    {
      name: "Travel",
      url: "#",
      icon: Map,
    },
  ],
}
// File: components/authorized/side-bar/app-sidebar/app-sidebar.tsx
"use client"
import * as React from "react"
import { data } from "@/components/authorized/side-bar/app-sidebar/app-sidebar.data"
import { NavMain } from "@/components/authorized/side-bar/nav/nav-main"
import { NavProjects } from "@/components/authorized/side-bar/nav/nav-projects"
import { NavUser } from "@/components/authorized/side-bar/nav/nav-user"
import { CovoLogo } from "@/components/authorized/side-bar/covo-logo/CovoLogo"
import { Sidebar, SidebarContent, SidebarFooter, SidebarHeader, SidebarRail } from "@/components/ui/sidebar"

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  return (
    <Sidebar collapsible="icon" {...props}>
      <SidebarHeader>
        <CovoLogo />
      </SidebarHeader>
      <SidebarContent>
        <NavMain items={data.navMain} />
        <NavProjects projects={data.projects} />
      </SidebarContent>
      <SidebarFooter>
        <NavUser user={data.user} />
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  )
}

// File: components/authorized/side-bar/covo-logo/CovoLogo.tsx
"use client"

import * as React from "react"
import Image from 'next/image'
import COVO_LOGOGRAM_BLACK_2 from "@/assets/images/COVO_LOGOGRAM_BLACK_2.png"
export function CovoLogo() {
  return (
    <div className="flex items-center justify-start">
      <Image className="opacity-80" src={COVO_LOGOGRAM_BLACK_2} alt="Logo" width={100} height={100} />
    </div>
  )
}

// File: components/authorized/side-bar/nav/nav-main.tsx
"use client"

import { ChevronRight, type LucideIcon } from "lucide-react"

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible"
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/ui/sidebar"

export function NavMain({
  items,
}: {
  items: {
    title: string
    url: string
    icon?: LucideIcon
    isActive?: boolean
    items?: {
      title: string
      url: string
    }[]
  }[]
}) {
  return (
    <SidebarGroup>
      <SidebarGroupLabel>Platform</SidebarGroupLabel>
      <SidebarMenu>
        {items.map((item) => (
          <Collapsible
            key={item.title}
            asChild
            defaultOpen={item.isActive}
            className="group/collapsible"
          >
            <SidebarMenuItem>
              <CollapsibleTrigger asChild>
                <SidebarMenuButton tooltip={item.title}>
                  {item.icon && <item.icon />}
                  <span>{item.title}</span>
                  <ChevronRight className="ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90" />
                </SidebarMenuButton>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <SidebarMenuSub>
                  {item.items?.map((subItem) => (
                    <SidebarMenuSubItem key={subItem.title}>
                      <SidebarMenuSubButton asChild>
                        <a href={subItem.url}>
                          <span>{subItem.title}</span>
                        </a>
                      </SidebarMenuSubButton>
                    </SidebarMenuSubItem>
                  ))}
                </SidebarMenuSub>
              </CollapsibleContent>
            </SidebarMenuItem>
          </Collapsible>
        ))}
      </SidebarMenu>
    </SidebarGroup>
  )
}

// File: components/authorized/side-bar/nav/nav-projects.tsx
"use client"

import {
  Folder,
  Forward,
  MoreHorizontal,
  Trash2,
  type LucideIcon,
} from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function NavProjects({
  projects,
}: {
  projects: {
    name: string
    url: string
    icon: LucideIcon
  }[]
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarMenu>
        {projects.map((item) => (
          <SidebarMenuItem key={item.name}>
            <SidebarMenuButton asChild>
              <a href={item.url}>
                <item.icon />
                <span>{item.name}</span>
              </a>
            </SidebarMenuButton>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction showOnHover>
                  <MoreHorizontal />
                  <span className="sr-only">More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className="w-48 rounded-lg"
                side={isMobile ? "bottom" : "right"}
                align={isMobile ? "end" : "start"}
              >
                <DropdownMenuItem>
                  <Folder className="text-muted-foreground" />
                  <span>View Project</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Forward className="text-muted-foreground" />
                  <span>Share Project</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Trash2 className="text-muted-foreground" />
                  <span>Delete Project</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className="text-sidebar-foreground/70">
            <MoreHorizontal className="text-sidebar-foreground/70" />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  )
}

// File: components/authorized/side-bar/nav/nav-user.tsx
"use client"

import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Sparkles,
} from "lucide-react"

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@/components/ui/avatar"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function NavUser({
  user,
}: {
  user: {
    name: string
    email: string
    avatar: string
  }
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">CN</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            side={isMobile ? "bottom" : "right"}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <LogOut />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}

// File: components/shared/AllContextsProvider.tsx
import React from 'react';

const AllContextsProvider = ({ contexts, children }) => {
    return contexts.reduce((acc, [Context, value]) => (
        <Context.Provider value={value}>{acc}</Context.Provider>
    ), children);
};

export default AllContextsProvider;

// File: components/shared/Calendar.component.tsx
"use client"

import * as React from "react"

import { Calendar } from "@/components/ui/calendar"

export default function CalendarDemo() {
  const [date, setDate] = React.useState<Date | undefined>(new Date())

  return (
    <Calendar
      mode="range"
      selected={date}
      onSelect={setDate}
      className="rounded-md border bg-white shadow-sm"
    />
  )
}

// File: components/ui/alert-dialog.tsx
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full  translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

// File: components/ui/avatar.tsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

// File: components/ui/breadcrumb.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

// File: components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// File: components/ui/calendar.tsx
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <div className="w-[180px] h-[200px] overflow-hidden">
      <DayPicker
        showOutsideDays={showOutsideDays}
        className={cn("p-1", className)}
        classNames={{
          months: "flex flex-col sm:flex-row space-y-2 sm:space-x-2 sm:space-y-0",
          month: "space-y-2",
          caption: "flex justify-center pt-1 relative items-center",
          caption_label: "text-xs font-medium",
          nav: "space-x-1 flex items-center",
          nav_button: cn(
            buttonVariants({ variant: "outline" }),
            "h-5 w-5 bg-transparent p-0 opacity-50 hover:opacity-100"
          ),
          nav_button_previous: "absolute left-1",
          nav_button_next: "absolute right-1",
          table: "w-full border-collapse space-y-1",
          head_row: "flex",
          head_cell:
            "text-muted-foreground rounded-md w-6 font-normal text-[0.7rem]",
          row: "flex w-full mt-1",
          cell: cn(
            "relative p-0 text-center text-xs focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
            props.mode === "range"
              ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
              : "[&:has([aria-selected])]:rounded-md"
          ),
          day: cn(
            buttonVariants({ variant: "ghost" }),
            "h-6 w-6 p-0 font-normal aria-selected:opacity-100"
          ),
          day_range_start: "day-range-start",
          day_range_end: "day-range-end",
          day_selected:
            "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
          day_today: "bg-accent text-accent-foreground",
          day_outside:
            "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
          day_disabled: "text-muted-foreground opacity-50",
          day_range_middle:
            "aria-selected:bg-accent aria-selected:text-accent-foreground",
          day_hidden: "invisible",
          ...classNames,
        }}
        components={{
          IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
          IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
        }}
        {...props}
      />
    </div>
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

// File: components/ui/collapsible.tsx
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

// File: components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

// File: components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

// File: components/ui/label.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

// File: components/ui/popover.tsx
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

// File: components/ui/scroll-area.tsx
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

// File: components/ui/separator.tsx
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

// File: components/ui/sheet.tsx
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

// File: components/ui/sidebar.tsx
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex  has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

// File: components/ui/skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

// File: components/ui/switch.tsx
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

// File: components/ui/tooltip.tsx
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

// File: components/unauthorized/footer/Footer.page.tsx
import ContactLegal from "./contact-legal/ContactLegal.component";
import Join from "./join/Join.component";
import CovoBackground from './covo-logo-section/CovoBackground.component'
import COVO_WHITE_NO_BG_2 from "@/assets/images/COVO_WHITE_NO_BG_2.png"



export default function Footer() {
  return (
    <footer className={`py-[2em] bg-custom-lark-blue h-auto w-full text-gray-300 flex justify-center items-center lg:block`}>

      <div className="max-w-[450px] w-full lg:max-w-[100vw]  flex lg:flex-row flex-col-reverse justify-center lg:justify-around ">

        {/* <section className=" h-[100px] w-full lg:h-[400px] lg:w-[400px] flex justify-center items-center ">
          <Image className="opacity-50" src={COVO_WHITE_NO_BG_2} alt="COVO_WHITE_NO_BG" />
        </section> */}

        <CovoBackground alt="COVO_WHITE_NO_BG" src={COVO_WHITE_NO_BG_2} className=" h-[100px] w-full lg:h-[400px] lg:w-[400px] flex justify-center items-center " />

        <ContactLegal className="lg:basis-1/3 flex flex-col justify-center px-[1em] " />
        <br />
        <Join className="basis-1/3 flex flex-col justify-center px-[1em]" />

      </div>

    </footer>
  );
}

// File: components/unauthorized/footer/contact-legal/ContactLegal.component.tsx
import Legal from './legal/Legal.component';
import Contact from './contact/Contact.component';
import IContactLegalProps from './ContactLegal.model'

export default function ContactLegal(props: IContactLegalProps) {
  return (
    <section className={ props.className } >
      <Legal />
      <Contact />
    </section>
  )
}
// File: components/unauthorized/footer/contact-legal/ContactLegal.model.ts
export default interface IContactLegalProps {
  className: string;
}

// File: components/unauthorized/footer/contact-legal/contact/Contact.component.tsx
import { logoArray } from './Contact.data';
import IContactProps from './Contact.model'
import LogoArrayComponent from './logo-array/LogoArray.component'

export default function Contact(props: IContactProps) {
  return (
    <section className={ props.className }>
      <br/>
      <h3 className="text-xl font-semibold" >Contact Us</h3>
      <LogoArrayComponent className={`flex flex-row justify-around my-[2em] lg:pr-[25%]`} logoArray={logoArray} />
    </section>
  );
}
// File: components/unauthorized/footer/contact-legal/contact/Contact.data.ts
import facebookLogo from '@/assets/svg/facebookLogo_SVGrepo.svg';
import instagramLogo from '@/assets/svg/instagramOutlineLogo_SVGrepo.svg';
import linkedInLogo from '@/assets/svg/linkedinLogo_SVGrepo.svg'
import xLogo from '@/assets/svg/xLogo_SVGrepo.svg'
import gmailLogo from '@/assets/svg/gmailLogo_SVGrepo.svg'

const logoArray = [
  {
    src: facebookLogo,
    id: 1,
    altName: 'Facebook logo',
    href: 'https://facebook.com',
  },
  {
    src: instagramLogo,
    id: 2,
    altName: 'Instagram logo',
    href: 'https://instagram.com',
  },
  {
    src: linkedInLogo,
    id: 3,
    altName: 'linkedIn logo',
    href: 'https://linkedin.com',
  },
  {
    src: xLogo,
    id: 4,
    altName: 'X logo',
    href: 'https://x.com',
  },
  {
    src: gmailLogo,
    id: 5,
    altName: 'gmail logo',
    href: 'https://gmail.com',
  }
]

export { logoArray };
// File: components/unauthorized/footer/contact-legal/contact/Contact.model.ts
export default interface IContactProps {
  className ?: string
}
// File: components/unauthorized/footer/contact-legal/contact/logo-array/LogoArray.component.tsx
import Image from 'next/image';
import ILogoArrayProps from './LogoArray.model'

export default function LogoArrayComponent(props: ILogoArrayProps) {
  return (
    <div className={props.className} >
      {
        props.logoArray.map(logo => {
          return (
            <a key={logo.id} href={logo.href} target="active" >
              <Image
                src={logo.src}
                alt={logo.altName}
                width={20}
                height={20}
                className='filter invert brightness-0 opacity-80'>
              </Image>
            </a>
          )
        })
      }
    </div>
  )
}
// File: components/unauthorized/footer/contact-legal/contact/logo-array/LogoArray.model.ts
export default interface ILogoArrayProps {
  logoArray: Array<T>;
  className: string;
}
// File: components/unauthorized/footer/contact-legal/legal/Legal.component.tsx
import LegalElements from './LegalElements.component'

export default function Legal() {

  return (
    <section>
      <h3 className="text-xl font-semibold">Legal</h3>
      <LegalElements className='px-[0.5em] py-[1em]'/>
    </section>
  );
}
// File: components/unauthorized/footer/contact-legal/legal/LegalElements.component.tsx
import ILegalElementsProps from './LegalElements.model'
import {legalObjectsArray} from './LegalElements.data'

export default function LegalElements(props: ILegalElementsProps) {
  return (
    <nav className={ props.className }>
        <ul>
          {
            legalObjectsArray.map(legalObject => {
              return (
                <li key={legalObject.id}><a target="active" href={legalObject.href}>{legalObject.content}</a></li>
              )
            })
          }
        </ul>
    </nav>
  )
}
// File: components/unauthorized/footer/contact-legal/legal/LegalElements.data.ts
const legalObjectsArray = [
  {
    id: 1,
    content: 'Terms and Conditions',
    href: 'https://google.com',
  },
  {
    id: 2,
    content: 'Privacy Policy',
    href: 'https://google.com',
  },
  {
    id: 3,
    content: 'Refund Policy',
    href: 'https://google.com',
  },
  {
    id: 4,
    content: 'Accessibility Statement',
    href: 'https://google.com',
  }
]

export {legalObjectsArray}
// File: components/unauthorized/footer/contact-legal/legal/LegalElements.model.ts
export default interface ILegalElementsProps {
  className: string;
}

// File: components/unauthorized/footer/covo-logo-section/CovoBackground.component.tsx
import Image from "next/image";
import COVO_WHITE_NO_BG_2 from "@/assets/images/COVO_WHITE_NO_BG_2.png"
import ICovoBackgroundProps from './CovoBackground.model'

export default function CovoBackground(props: ICovoBackgroundProps) {
  return (
    <section className={ props.className }>
      <Image className="opacity-50" src={COVO_WHITE_NO_BG_2} alt="COVO_WHITE_NO_BG" />
    </section>
  )
}
// File: components/unauthorized/footer/covo-logo-section/CovoBackground.model.tsx
import { type StaticImageData } from 'next/image';

export default interface ICovoBackgroundProps {
  className: string;
  src: StaticImageData;
  alt: string;
}
// File: components/unauthorized/footer/join/Join.component.tsx
import { inputBoxArray } from './Join.data'
import InputButton from './input-button/InputButton.component'
import SubscribeComponent from './input-button/Subscribe.component'
import IJoinProps from './Join.model'

export default function Join(props: IJoinProps) {
  return (
    <section className={props.className}>
      <h3 className={"text-xl font-semibold"} >Join Our Newsletter</h3>
      <form>
        <fieldset >
          <div className="flex flex-col">
            {
              inputBoxArray.map(inputBox => {
                return (
                  <InputButton key={inputBox.id} id={inputBox.id} label={inputBox.label} borderColor={inputBox.borderColor} borderHoverColor={inputBox.borderHoverColor} />
                )})
            }
          </div>
          <br />
          <SubscribeComponent />
        </fieldset>
      </form>
    </section>
  );
}
// File: components/unauthorized/footer/join/Join.data.ts
const inputBoxArray = [
  {
    id: "emailForm",
    label: "Email",
    borderColor: "border-gray-300",
    borderHoverColor: "bg-red-500",
  },
  {
    id: "nameForm",
    label: "Name",
    borderColor: "border-gray-300",
    borderHoverColor: "bg-red-500",
  }
]

export { inputBoxArray }
// File: components/unauthorized/footer/join/Join.model.tsx
export default interface IJoinProps {
  className: string;
}


// File: components/unauthorized/footer/join/input-button/InputButton.component.tsx
import IInputButtonProps from './InputButton.model';

export default function InputButtonImportant(props: IInputButtonProps) {
  return (
    <>
      <label htmlFor={props.id} className="my-[1em]" >{ props.label }<em className="text-red-500">*</em></label>
      <div className="relative lg:w-[80%] " >
        <input placeholder={ `Enter your ${ props.label.toLowerCase() }`  }type="text" id={ props.id } className={ `w-full border-b-2 ${ props.borderColor } bg-transparent text-gray-300 focus:outline-none focus:border-white peer ` }/>
        <span className={ `absolute bottom-0 left-1/2 w-0 h-[2px] ${ props.borderHoverColor }  transition-all duration-300 peer-focus:left-0 peer-focus:w-full ` }></span>
      </div>
    </>
  )
}
// File: components/unauthorized/footer/join/input-button/InputButton.model.ts
export default interface IInputButtonProps {
  id: string;
  label: string;
  borderColor: string;
  borderHoverColor: string;
}

// File: components/unauthorized/footer/join/input-button/Subscribe.component.tsx
export default function SubscribeComponent() {
  return (
    <div className="flex flex-row lg:pr-[20%] justify-between">
      <div className="flex flex-row align-center" >
        <input type="checkbox" className="appearance-none my-auto w-4 h-4 mr-[0.5em] border border-[#e3f0ff] rounded-sm checked:bg-[#e3f0ff] checked:border-transparent checked:ring-2 transition-all duration-150 checked:ring-blue-500" id="subscribe" name="subscribe" value="yes" />
        <label htmlFor="subscribe" className="pt-[9px]">Subscribe to newsletter</label>
      </div>
      <button type="submit" className="h-[40px] w-[120px] bg-[#053565] hover:text-[#053565] hover:bg-[#e3f0ff] hover:border-2 hover:border-double hover:border-[#053565] transition-all duration-300 ">Submit</button>
    </div>
  )
}
// File: components/unauthorized/landing-page/LandingPage.page.tsx
import Hero from "./hero/Hero.component";
import LogoSlider from "./logo-slider/LogoSlider.component";
import About from "./about/About.component";
import Benefits from "./benefits/Benefits.component";
import Price from "./price/Price.component";
import Features from "./features/features.component";
import Faq from "./faq/faq.component";

export default function LandingPagePage() {
	return (
		<div>
			<div className="bg-custom-light-grayish-blue2">
				<section id="home">
					<Hero />
				</section>
				<LogoSlider />
				<section id="about">
					<About />
				</section>
				<section id="benefits">
					<Benefits />
				</section>
				<section id="features">
					<Features />
				</section>
				<section id="faq">
					<Faq />
				</section>
				<section id="pricing">
					<Price />
				</section>
				<br />
			</div>
		</div>
	);
}

// File: components/unauthorized/landing-page/about/About.component.tsx
import AboutBox from "./about-box/AboutBox.component";
import { AboutArray, limelight, roboto } from "./about.data";

export default function About() {
	return (
		<section className="flex flex-col w-full h-full bg-custom-light-grayish-blue2 py-9 px-4">
			<div className="grid gap-2">
				<p className="text-5xl text-center uppercase text-custom-dark-desaturated-blue">{" "}FIND YOUR PERFECT MATCH WITH {" "}<strong className={`${limelight.className}`}>COVO</strong>{" "}</p>
				<p className="text-1xl font-[600] text-custom-dark-desaturated-blue text-center">Connect With Top Brands & Unlock Exciting Opportunities.</p>
			</div>
			<br />
			<div className="flex flex-wrap gap-2 justify-center items-center">
				{AboutArray.map((about) => {
					return (
						<AboutBox
							key={about.id}
							imageURL={about.imageURL}
							title={about.title}
							text={about.text}
							className={`bg-white w-[400px] h-[400px] rounded-lg border-custom-light-grayish-blue border-2 flex flex-col justify-center items-center p-4
                          bg-[url("/svg/BG.svg")]
                          ${roboto.className} px-[1.5em] py-[1em]`}
						/>
					);
				})}
			</div>
		</section>
	);
}

// File: components/unauthorized/landing-page/about/about-box/AboutBox.component.tsx
import { IAboutBoxProps } from "./AboutBox.model";
import Image from "next/image";

export default function AboutBox(props: IAboutBoxProps) {
	return (
		<article className={props.className}>
			<div className="h-[120px] flex justify-center items-center">
				<Image src={props.imageURL} width={120} alt={props.title} />
			</div>
			<br />
			<h1 className="text-2xl font-[600] text-custom-dark-desaturated-blue text-center">
				{props.title}
			</h1>
			<p className=" font-[300] text-custom-dark-desaturated-blue text-center">{props.text}</p>
		</article>
	);
}
// File: components/unauthorized/landing-page/about/about-box/AboutBox.model.ts
export interface IAboutBoxProps {
	title: string;
	imageURL: string;
	text: string;
	className: string;
}

// File: components/unauthorized/landing-page/about/about.data.ts
import { Roboto } from "next/font/google";
import { Limelight } from "next/font/google";
import growth_analytics from "@/assets/svg/growth_analytics.svg"
import job_hunt from "@/assets/svg/job_hunt.svg"
import team_collaboration from "@/assets/svg/team_collaboration.svg"
import transfer_money from "@/assets/svg/transfer_money.svg"

export const limelight = Limelight({
	subsets: ["latin"],
	weight: ["400"],
	style: ["normal"],
	display: "swap",
});

export const roboto = Roboto({
	subsets: ["latin"],
	weight: ["400", "700"],
	style: ["normal", "italic"],
	display: "swap",
});

export const AboutArray = [
	{
		title: "DISCOVER OPPORTUNITIES",
		text: "Find tailored campaigns that align with your niche and audience.",
		bgColor: "bg-blue-400 ",
		imageURL: job_hunt,
		id: 1,
	},
	{
		title: "EFFICIENT COLLABORATION",
		text: "Streamlined communication and project management tools.",
		bgColor: "bg-blue-300 ",
		imageURL: team_collaboration,
		id: 2,
	},
	{
		title: "FAIR COMPENSATION",
		text: "Transparent payment terms and competitive rates.",
		bgColor: "bg-blue-200 ",
		imageURL: transfer_money,
		id: 3,
	},
	{
		title: "GROW YOUR BRAND",
		text: "Gain exposure, build your following , and establish yourself as an industry leader.",
		bgColor: "bg-blue-100 ",
		imageURL: growth_analytics,
		id: 4,
	},
];

// File: components/unauthorized/landing-page/benefits/Benefits.component.tsx
import Image from "next/image";
import {cardInformation} from "./Benefits.data"

export default function Benefits() {
	
	return (
		<div className="bg-custom-light-grayish-blue2">
			<div className="grid gap-2">
				<h1 className="text-5xl font-[700] text-custom-dark-desaturated-blue text-center">
					Benefits
				</h1>
				<p className="text-3xl font-[600] text-custom-lark-blue text-center">
					One Platform — Cost-Effective Influencer Marketing
				</p>
				<p className="text-1xl font-[600] text-custom-dark-desaturated-blue text-center">
					Simplify your influencer marketing with our all-in-one platform,
					offering cost-effective solutions while streamlining your influencer
					marketing efforts and maximize ROI with our affordable platform.
				</p>
			</div>
			<br />
			<div className="flex flex-wrap gap-2 justify-center items-center">
				{cardInformation.map((cardObject) => (
					<div
						key={cardObject.id}
						className="bg-white bg-[url('/svg/BG.svg')] w-[400px] h-[400px] rounded-lg border-custom-light-grayish-blue border-2 flex flex-col justify-center items-center p-4"
					>
						<div className="flex justify-center items-center h-[100px]">
						<Image
							src={cardObject.url}
							alt={`Brand logo ${cardObject.id}`}
							width={200}
							height={200}
							className="w-[100px] h-auto "
						/>
						</div>
						<br />
						<p className="text-2xl font-[600] text-custom-dark-desaturated-blue text-center">
							{cardObject.text}
						</p>
						<p className=" font-[300] text-custom-dark-desaturated-blue text-center">
							{cardObject.supText}
						</p>
					</div>
				))}
			</div>
		</div>
	);
}

// File: components/unauthorized/landing-page/benefits/Benefits.data.ts
export const cardInformation = [
	{
		url: "/svg/people_search.svg",
		text: "Discover Influencers",
		supText:
			"Our platform offers a user-friendly interface for easily searching and filtering influencers based on various criteria, including niche, audience demographics, engagement rates and location.",
		id: 1,
	},
	{
		url: "/svg/building_blocks.svg",
		text: "Build Your Campaign",
		supText:
			"Our platform provides a streamlined process for creating and customizing campaigns, allowing brands to define their objectives, target audience, budget, and desired deliverables.",
		id: 2,
	},
	{
		url: "/svg/software_engineer.svg",
		text: "Cloud-Enabled",
		supText:
			"Our cloud-based platform ensures scalability, accommodating both small and large-scale campaigns without compromising performance.",
		id: 3,
	},
	{
		url: "/svg/co_workers.svg",
		text: "Manage Ongoing Campaigns",
		supText:
			"Stay informed about the progress of your campaigns through real-time updates and notifications.",
		id: 4,
	},
	{
		url: "/svg/chat_bot.svg",
		text: "AI-Driven Recommendations",
		supText:
			"Leveraging AI-powered algorithms, we provide precise matches between brands and influencers, ensuring optimal campaign alignment.",
		id: 5,
	},
	{
		url: "/svg/secure_login.svg",
		text: "Encryption and Security",
		supText:
			"Rest assured that your data is safeguarded with robust encryption protocols, ensuring the confidentiality and integrity of your information.",
		id: 6,
	},
];
// File: components/unauthorized/landing-page/faq/faq-buttons/for-agencies/ForAgencies.button.tsx
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ForAgenciesQuestions } from "./ForAgencies.data";




export default function ForAgenciesButton() {
  return (
    <AlertDialog>
      <AlertDialogTrigger className="bg-white bg-[url('/svg/BG.svg')] hover:bg-gray-300/70 w-[400px] h-[100px] border-2 border-custom-light-grayish-blue rounded-md"><p className="text-4xl font-[700] text-custom-dark-desaturated-blue text-center">For Agencies</p></AlertDialogTrigger>
      <AlertDialogContent className="w-[70%] border-none">
        <AlertDialogTitle>
          <div className="w-full text-center p-5">
            <strong className="text-3xl text-center text-custom-lark-blue">For Agencies Questions</strong>
          </div>
        </AlertDialogTitle>
        <AlertDialogHeader className="bg-white bg-[url('/svg/BG.svg')] h-auto">
          <ScrollArea className="max-h-[550px]">
            {ForAgenciesQuestions.map((question) => {
              return (
                <div key={question.id}>
                  <strong className="text-custom-dark-desaturated-blue">{question.question}</strong>
                  <p className="text-custom-dark-desaturated-blue">{question.answer}</p>
                  <br />
                </div>
              );
            })}
          </ScrollArea>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogAction className="bg-custom-lark-blue w-[100px]">Continue</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
// File: components/unauthorized/landing-page/faq/faq-buttons/for-agencies/ForAgencies.data.ts

export const ForAgenciesQuestions = [
  {
    id: 1,
    question: "1. HOW CAN MARKETING AGENCIES USE COVO?",
    answer: "COVO offers marketing agencies the ability to manage influencer campaigns for their clients seamlessly. With access to a network of vetted influencers, streamlined campaign tools, and performance analytics, agencies can enhance their service offerings and create impactful campaigns."
  },
  {
    id: 2,
    question: "2. CAN COVO SUPPORT MULTIPLE CLIENTS UNDER ONE AGENCY ACCOUNT?",
    answer: "Yes, agencies can manage multiple clients and campaigns from a single COVO account. Our platform allows for streamlined oversight, making it easy to organize and execute multiple campaigns."
  },
  {
    id: 3,
    question: "3. WHAT ARE THE BENEFITS OF USING COVO INSTEAD OF TRADITIONAL INFLUENCER MARKETING METHODS?",
    answer: "COVO provides efficiency, scalability, and data-driven insights all in one platform. Compared to traditional methods, COVO’s AI simplifies influencer discovery, and its centralized tools reduce time spent on communication, reporting, and tracking."
  }
];

// File: components/unauthorized/landing-page/faq/faq-buttons/for-brands/ForBrands.button.tsx
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ForBrandsQuestions } from "./ForBrands.data";




export default function ForBrandsButton() {
  return (
    <AlertDialog>
      <AlertDialogTrigger className="bg-white bg-[url('/svg/BG.svg')] hover:bg-gray-300/70 w-[400px] h-[100px] border-2 border-custom-light-grayish-blue rounded-md"><p className="text-4xl font-[700] text-custom-dark-desaturated-blue text-center">For Brands</p></AlertDialogTrigger>
      <AlertDialogContent className="w-[70%] border-none">
        <AlertDialogTitle>
          <div className="w-full text-center p-5">
            <strong className="text-3xl text-center text-custom-lark-blue">For Brands Questions</strong>
          </div>
        </AlertDialogTitle>
        <AlertDialogHeader className="bg-white bg-[url('/svg/BG.svg')] h-auto">
          <ScrollArea className="max-h-[550px]">
            {ForBrandsQuestions.map((question) => {
              return (
                <div key={question.id}>
                  <strong className="text-custom-dark-desaturated-blue">{question.question}</strong>
                  <p className="text-custom-dark-desaturated-blue">{question.answer}</p>
                  <br />
                </div>
              );
            })}
          </ScrollArea>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogAction className="bg-custom-lark-blue w-[100px]">Continue</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
// File: components/unauthorized/landing-page/faq/faq-buttons/for-brands/ForBrands.data.ts
export const ForBrandsQuestions = [
  {
    id: 1,
    question: "1. HOW CAN COVO BENEFIT MY BRAND?",
    answer: "COVO helps you discover vetted influencers who are perfect for your campaign goals, providing access to local creators in any market. With COVO, you save time, streamline communication, and gain insights into campaign performance—all in one place."
  },
  {
    id: 2,
    question: "2. HOW DOES COVO’S AI-POWERED MATCHING WORK?",
    answer: "Our AI algorithm takes into account your campaign objectives, target audience, and brand values to recommend influencers who fit your specific needs. This way, you can focus on impactful connections without the time-consuming search."
  },
  {
    id: 3,
    question: "3. HOW MUCH DOES IT COST TO USE COVO AS A BRAND?",
    answer: "COVO operates on a subscription model, starting at $150 per month. This covers access to our platform’s tools, analytics, and our network of vetted influencers. We also offer custom packages for larger campaigns."
  },
  {
    id: 4,
    question: "4. CAN COVO HANDLE INTERNATIONAL CAMPAIGNS?",
    answer: "Yes, COVO is built to help brands connect with influencers from around the world. Our platform makes it easy to manage cross-border campaigns and discover local influencers who can bring authenticity to your global campaigns."
  }
];
// File: components/unauthorized/landing-page/faq/faq-buttons/for-influencers/ForInfluencers.button.tsx
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ForInfluencersQuestions } from "./ForInfluencers.data";




export default function ForInfluencersButton() {
  return (
    <AlertDialog>
      <AlertDialogTrigger className="bg-white bg-[url('/svg/BG.svg')] hover:bg-gray-300/70 w-[400px] h-[100px] border-2 border-custom-light-grayish-blue rounded-md"><p className="text-4xl font-[700] text-custom-dark-desaturated-blue text-center">For Influencers</p></AlertDialogTrigger>
      <AlertDialogContent className="w-[70%] border-none">
        <AlertDialogTitle>
          <div className="w-full text-center p-5">
            <strong className="text-3xl text-center text-custom-lark-blue">For Influencers Questions</strong>
          </div>
        </AlertDialogTitle>
        <AlertDialogHeader className="bg-white bg-[url('/svg/BG.svg')] h-auto">
          <ScrollArea className="max-h-[550px]">
            {ForInfluencersQuestions.map((question) => {
              return (
                <div key={question.id}>
                  <strong className="text-custom-dark-desaturated-blue">{question.question}</strong>
                  <p className="text-custom-dark-desaturated-blue">{question.answer}</p>
                  <br />
                </div>
              );
            })}
          </ScrollArea>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogAction className="bg-custom-lark-blue w-[100px]">Continue</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
// File: components/unauthorized/landing-page/faq/faq-buttons/for-influencers/ForInfluencers.data.ts
export const ForInfluencersQuestions = [
  {
    id: 1,
    question: "1. WHAT CAN I EXPECT AS AN INFLUENCER ON COVO?",
    answer: "As a creator on COVO, you gain direct access to brands seeking partnerships in your region and market. You can apply for campaigns, communicate with brands, and manage all aspects of your partnerships in one place, with COVO supporting fair and secure payments."
  },
  {
    id: 2,
    question: "2. DO I NEED A MINIMUM FOLLOWER COUNT TO JOIN COVO?",
    answer: "Yes, the minimum follower count is 1,000. However, we prioritize influencers with genuine engagement and a consistent brand identity. Our goal is to connect brands with creators who have authentic influence, regardless of follower size beyond this threshold."
  },
  {
    id: 3,
    question: "3. HOW DO I GET PAID FOR CAMPAIGNS?",
    answer: "Payments are handled securely through COVO. Once campaign terms are agreed upon and milestones are met, payments are processed directly through the platform, ensuring timely and transparent transactions."
  },
  {
    id: 4,
    question: "4. CAN I CONNECT WITH MULTIPLE BRANDS ON COVO?",
    answer: "Absolutely! COVO allows you to connect with multiple brands, providing a variety of opportunities that align with your style and audience. The more active you are, the greater the chance to secure campaigns."
  }
];
// File: components/unauthorized/landing-page/faq/faq-buttons/general/General.button.tsx
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { GeneralQuestions } from "./General.data";




export default function GeneralButton() {
  return (
    <AlertDialog>
      <AlertDialogTrigger className="bg-white bg-[url('/svg/BG.svg')] hover:bg-gray-300/70 w-[400px] h-[100px] border-2 border-custom-light-grayish-blue rounded-md"><p className="text-4xl font-[700] text-custom-dark-desaturated-blue text-center ">General</p></AlertDialogTrigger>
      <AlertDialogContent className="w-[70%] border-none">
        <AlertDialogTitle>
          <div className="w-full text-center p-5">
            <strong className="text-3xl text-center text-custom-lark-blue">General Questions</strong>
          </div>
        </AlertDialogTitle>
        <AlertDialogHeader className="bg-white bg-[url('/svg/BG.svg')] h-auto">
          <ScrollArea className="max-h-[550px]">
          {GeneralQuestions.map((question) => {
              return (
                <div key={question.id}>
                  <strong className="text-custom-dark-desaturated-blue">{question.question}</strong>
                  <p className="text-custom-dark-desaturated-blue">{question.answer}</p>
                  <br />
                </div>
              );
            })}
          </ScrollArea>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogAction className="bg-custom-lark-blue w-[100px]">Continue</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
// File: components/unauthorized/landing-page/faq/faq-buttons/general/General.data.ts
export const GeneralQuestions = [
  {
    id: 1,
    question: "1. WHAT IS COVO?",
    answer: "COVO is a platform that connects global brands with local influencers and creators. Our AI-driven system simplifies the process of discovering, managing, and measuring influencer campaigns, making partnerships more accessible, authentic, and impactful."
  },
  {
    id: 2,
    question: "2. HOW DOES COVO WORK?",
    answer: "Brands and influencers create profiles on COVO. Brands can search for creators who align with their campaign goals, while influencers can connect with brands looking for authentic engagement. COVO manages everything from discovery and communication to payments and real-time analytics."
  }
];
// File: components/unauthorized/landing-page/faq/faq-buttons/technical-support/TechnicalSupport.button.tsx
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { TechnicalSupportQuestions } from "./TechnicalSupport.data";


export default function TechnicalSupportButton() {
  return (
    <AlertDialog>
      <AlertDialogTrigger className="bg-white bg-[url('/svg/BG.svg')] hover:bg-gray-300/70 w-[400px] h-[100px] border-2 border-custom-light-grayish-blue rounded-md"><p className="text-4xl font-[700] text-custom-dark-desaturated-blue text-center">Technical & Support</p></AlertDialogTrigger>
      <AlertDialogContent className="w-[70%] border-none">
        <AlertDialogTitle>
          <div className="w-full text-center p-5">
            <strong className="text-3xl text-center text-custom-lark-blue">Technical & Support Questions</strong>
          </div>
        </AlertDialogTitle>
        <AlertDialogHeader className="bg-white bg-[url('/svg/BG.svg')] h-auto">
          <ScrollArea className="max-h-[550px]">
            {TechnicalSupportQuestions.map((question) => {
              return (
                <div key={question.id}>
                  <strong className="text-custom-dark-desaturated-blue">{question.question}</strong>
                  <p className="text-custom-dark-desaturated-blue">{question.answer}</p>
                  <br />
                </div>
              );
            })}
          </ScrollArea>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogAction className="bg-custom-lark-blue w-[100px]">Continue</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
// File: components/unauthorized/landing-page/faq/faq-buttons/technical-support/TechnicalSupport.data.ts
export const TechnicalSupportQuestions = [
  {
    id: 1,
    question: "1. IS THERE CUSTOMER SUPPORT AVAILABLE?",
    answer: "Yes, we provide dedicated customer support for all users. Our support team is available via chat and email to assist with any questions or technical issues."
  },
  {
    id: 2,
    question: "2. IS COVO SECURE?",
    answer: "COVO takes data security seriously. Our platform uses encrypted channels for all transactions, and we ensure that user data is handled in compliance with privacy standards."
  },
  {
    id: 3,
    question: "2. CAN I INTEGRATE COVO WITH MY EXISTING TOOLS?",
    answer: "We’re working on expanding integrations to make it easy for brands, influencers, and agencies to incorporate COVO into their current workflows. Stay tuned for updates on integration features."
  }
];

// File: components/unauthorized/landing-page/faq/faq.component.tsx
import GeneralButton from "./faq-buttons/general/General.button";
import ForBrandsButton from "./faq-buttons/for-brands/ForBrands.button";
import ForAgenciesButton from "./faq-buttons/for-agencies/ForAgencies.button";
import ForInfluencersButton from "./faq-buttons/for-influencers/ForInfluencers.button";
import TechnicalSupportButton from "./faq-buttons/technical-support/TechnicalSupport.button";
import { limelight } from "./faq.data";



export default function Faq() {
  return (
    <section className="flex flex-col justify-center items-center w-full h-full bg-custom-light-grayish-blue2 py-9 px-4">
			<div className="flex flex-col gap-2 justify-center items-center">
				<p className="text-5xl text-center uppercase text-custom-dark-desaturated-blue">{" "}Frequently Asked Questions About{" "}<strong className={`${limelight.className}`}>COVO</strong>{" "}</p>
				<p className="text-1xl font-[400] text-custom-dark-desaturated-blue text-center max-w-[800px]">COVO is a platform that connects brands with influencers. It simplifies influencer marketing by offering AI-powered matching, campaign management, and analytics. Brands can find suitable influencers, while influencers can connect with brands and manage campaigns efficiently. COVO provides features like secure payments, performance tracking, and support.</p>
			</div>
			<br />
      <div className="flex flex-wrap gap-2 justify-center items-center max-w-[900px] h-auto">
        <GeneralButton />
        <ForBrandsButton />
        <ForAgenciesButton />
        <ForInfluencersButton />
        <TechnicalSupportButton />
      </div>
		</section>
  );
}
// File: components/unauthorized/landing-page/faq/faq.data.ts
import { Limelight } from "next/font/google";

export const limelight = Limelight({
	subsets: ["latin"],
	weight: ["400"],
	style: ["normal"],
	display: "swap",
});

// File: components/unauthorized/landing-page/features/features.component.tsx
import Image from "next/image";
import { cardInformation } from "./features.data";


export default function Features() {
  return (
    <div className="bg-custom-light-grayish-blue2 pt-9">
      <div className="grid gap-2">
        <h1 className="text-5xl font-[700] text-custom-dark-desaturated-blue text-center">
          Features
        </h1>
        <p className="text-3xl font-[600] text-custom-lark-blue text-center">
          Find Your Perfect Influencer Match.

        </p>
        <p className="text-1xl font-[600] text-custom-dark-desaturated-blue text-center">
          Seamlessly discover and collaborate with influencers who align with your brand&apos;s goals.
        </p>
      </div>
      <br />
      <div className="flex flex-wrap gap-2 justify-center items-center">
        <div className="bg-white bg-[url('/svg/BG.svg')] w-[800px] h-auto rounded-lg border-custom-light-grayish-blue border-2 flex flex-wrap justify-center items-center p-4 m-4">
          {cardInformation.map((cardObject) => (
            <div key={cardObject.id}
              className=" flex flex-wrap justify-center items-center p-4">
              <div className=" ">
                <Image
                  src={cardObject.url}
                  alt={`Brand logo ${cardObject.id}`}
                  width={150}
                  height={150}
                  className="w-[120px] h-auto p-3"
                />
              </div>
              <div className="max-w-[600px]">
                <p className="text-2xl font-[600] text-custom-dark-desaturated-blue text-left">
                  {cardObject.text}
                </p>
                <p className=" font-[300] text-custom-dark-desaturated-blue text-start">
                  {cardObject.supText}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

}
// File: components/unauthorized/landing-page/features/features.data.ts
import data_processing from "@/assets/svg/data_processing.svg";
import server_cluster from "@/assets/svg/server_cluster.svg";

export const cardInformation = [
  {
    url: server_cluster,
    text: "Advanced Matching Algorithms",
    supText:
      "COVO's Advanced Matching Algorithms utilize machine learning and data analytics to intelligently connect brands with ideal influencers, ensuring highly effective collaborations.",
    id: 1,
  },
  {
    url: data_processing,
    text: "Data-Driven Insights",
    supText:
      "COVO provides Data-Driven Insights through real-time analytics and visualization tools, empowering brands to track campaign performance, measure ROI, and make informed decisions to optimize their influencer marketing strategies.",
    id: 2,
  }
];
// File: components/unauthorized/landing-page/hero/Hero.component.tsx
"use client";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { ReactTyped } from "react-typed";
import Rectangle from "@/assets/images/Rectangle.png";

export default function Hero() {
	return (
		<div className='bg-[url("/svg/BG.svg")] bg-no-repeat bg-cover w-full md:h-[700px] flex flex-wrap pb-9'>
			{/* Text Section */}
			<div className="order-2 md:order-1 md:w-1/2 md:h-full h-1/2 flex justify-center items-center">
				<div className="flex flex-col justify-center h-1/2 w-[70%] text-custom-dark-desaturated-blue">
					<p className="text-4xl font-[900] subpixel-antialiased">
						The easiest way to work with global brands and influencers
					</p>
					<p className="text-2xl subpixel-antialiased font-[400]">
						Join our growing community of{" "}
						<ReactTyped
							className="text-custom-lark-blue"
							strings={["500+ creators", "250+ brands"]}
							typeSpeed={50}
							backSpeed={30}
							backDelay={1500}
							loop={true}
							showCursor={true}
							cursorChar="|"
						/>
					</p>

					<Button className="w-[200px] h-[50px] mt-4 bg-custom-lark-blue hover:bg-custom-dark-desaturated-blue text-lg font-[500]">
						Start 7 day free trial
					</Button>
				</div>
			</div>

			{/* Image Section */}
			<div className="order-1 md:order-2 md:w-1/2 md:h-full h-1/2 flex justify-center items-center">
				<Image src={Rectangle} width={600} height={600} alt="Rectangle" />
			</div>
		</div>
	);
}

// File: components/unauthorized/landing-page/logo-slider/LogoSlider.component.tsx
import Image from "next/image";

export default function LogoSlider() {
	const imageURLs = [
		{ url: "/images/pngwing_pepsi.png", id: 1 },
		{ url: "/images/pngwingAdidas.png", id: 2 },
		{ url: "/images/pngwingBarbie.png", id: 3 },
		{ url: "/images/pngwingBurberry.png", id: 4 },
		{ url: "/images/pngwingCalvinKlein.png", id: 5 },
		{ url: "/images/pngwingPuma.png", id: 6 },
		{ url: "/images/pngwingZara.png", id: 7 },
	];

	return (
		<div className="relative w-full overflow-hidden bg-custom-light-grayish-blue2 border-2 border-custom-light-grayish-blue">
			<div className="flex animate-scroll">
				{/* First set of images */}
				<div className="flex min-w-full justify-around items-center py-8">
					{imageURLs.map((imageObject) => (
						<Image
							key={imageObject.id}
							src={imageObject.url}
							alt={`Brand logo ${imageObject.id}`}
							width={150}
							height={150}
							className="w-[100px] h-auto filter grayscale transition-opacity hover:grayscale-0"
						/>
					))}
				</div>
				{/* Duplicate set of images for seamless loop */}
				<div className="flex min-w-full justify-around items-center py-8">
					{imageURLs.map((imageObject) => (
						<Image
							key={`dup-${imageObject.id}`}
							src={imageObject.url}
							alt={`Brand logo ${imageObject.id}`}
							width={150}
							height={150}
							className="w-[100px] h-auto filter grayscale transition-opacity hover:grayscale-0"
						/>
					))}
				</div>
			</div>
		</div>
	);
}

// File: components/unauthorized/landing-page/price/Price.component.tsx
import PriceCard from "./price-card/priceCard";


export default function Price() {
  return (
    <div className="w-full h-full bg-custom-light-grayish-blue2 pt-9">
      <div className="grid gap-2 ">
        <h1 className="text-5xl font-[700] text-custom-dark-desaturated-blue text-center">
          Plans & Pricing
        </h1>
        <p className="text-3xl font-[600] text-custom-lark-blue text-center">
          Choose a Plan
          That Works for You
        </p>
      </div>
      <br />
      <div className="w-full h-full flex flex-wrap justify-center items-center gap-10">
        <PriceCard />
      </div>
    </div>
  );
}
// File: components/unauthorized/landing-page/price/price-card/priceCard.data.tsx
import advanced_customization from "@/assets/svg/advanced_customization.svg";
import dev_focus from "@/assets/svg/dev_focus.svg";
import projections from "@/assets/svg/projections.svg";



export const priceInformation = [
  {
    id: 1,
    imageURL: dev_focus,
    plan: "Beginner",
    price: 39,
    currency: "R",
    duration: "monthly",
    description: "Explore the basics with this introductory course",
    validity: "Valid for 3 months",
    includes: [
      "6 classes",
      "3 individual sessions",
      "Online resources"
    ]
  },
  {
    id: 2,
    imageURL: advanced_customization,
    plan: "Advanced",
    price: 59,
    currency: "R",
    duration: "monthly",
    description: "Perfect for creatives, freelancers, and experienced",
    validity: "Valid for 12 months",
    includes: [
      "6 classes",
      "3 individual sessions",
      "Online resources",
      "1 guest pass",
      "Free WiFi",
      "Weekly newsletter"
    ]
  },
  {
    id: 3,
    imageURL: projections,
    plan: "Pro",
    price: 99,
    currency: "R",
    duration: "monthly",
    description: "Unlimited access to professional content",
    validity: "Valid for 12 months",
    includes: [
      "6 classes",
      "3 individual sessions",
      "Online resources",
      "1 guest pass",
      "Free WiFi",
      "Weekly newsletter",
      "Priority support"
    ]
  }
];
// File: components/unauthorized/landing-page/price/price-card/priceCard.tsx
import React from 'react';
import Image from "next/image";
import { priceInformation } from "./priceCard.data";


export default function PriceCard() {
  return (
    <div className="flex flex-wrap justify-center gap-4">
      {priceInformation.map((plan) => (
        <div
          key={plan.id}
          className="bg-white rounded-lg overflow-hidden shadow-lg transition-transform transform hover:scale-105 h-auto w-[350px] flex flex-col"
        >
          <div className="p-1 bg-custom-dark-desaturated-blue" />
          <div className="p-8 flex-grow">
            <div className='flex justify-center items-center w-full h-[180px]'>
              <Image src={plan.imageURL} width={120} alt={plan.plan} />
            </div>
            <h2 className="text-3xl font-bold text-gray-800 mb-4">{plan.plan}</h2>
            <p className="text-gray-600 mb-6">{plan.description}</p>
            <p className="text-4xl font-bold text-gray-800 mb-6">
              {plan.currency}{plan.price} <span className="text-base font-normal">/{plan.duration}</span>
            </p>
            <p className="text-gray-500 mb-4">{plan.validity}</p>
            <ul className="text-sm text-gray-600 mb-6">
              {plan.includes.map((feature, index) => (
                <li key={index} className="mb-2 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="currentColor" fill="none" className="w-4 h-4 mr-2 text-green-500">
                    <path d="M5 13l4 4L19 7" strokeWidth={2} strokeLinejoin="round" strokeLinecap="round" />
                  </svg>
                  {feature}
                </li>
              ))}
            </ul>
          </div>
          <div className="p-4">
            <button className="w-full bg-custom-dark-desaturated-blue text-white rounded-full px-4 py-2 hover:bg-custom-dark-desaturated-blue/95 focus:outline-none focus:shadow-outline-green active:bg-green-800">
              Select Plan
            </button>
          </div>
        </div>
      ))}
    </div>
  );
}

// File: components/unauthorized/login/Login.component.tsx
// login/page.tsx
'use client';
import { useState, createContext } from 'react';
import LoginBoxImage from './login-box-image/LoginBoxImage';
import LoginBox from './login-box/LoginBox';
import AllContextsProvider from '@/components/shared/AllContextsProvider';
import { IUser } from '@/components/unauthorized/login/Login.model';


/* login page */
export const Context_email = createContext(null);
export const Context_password = createContext(null);
export const Context_error = createContext(null);
export const Context_loggedInSuccessfully = createContext(null);
export const Context_router = createContext(null);
export const Context_user = createContext(null);
export const Context_loading = createContext(null);



export default function Login() {

    /* login page */
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [loggedInSuccessfully, setLoggedInSuccessfully] = useState('');
    const [user, setUser] = useState<IUser | null>(null);
    const [loading, setLoading] = useState(true);


    const contexts = [
        [Context_email, { email, setEmail }],
        [Context_password, { password, setPassword }],
        [Context_error, { error, setError }],
        [Context_user, { user, setUser }],
        [Context_loading, { loading, setLoading }],
        [Context_loggedInSuccessfully, { loggedInSuccessfully, setLoggedInSuccessfully }],
    ];

    return (
        <AllContextsProvider contexts={contexts}>
            <main className="h-[calc(100dvh-100px)] flex items-center justify-center p-6 relative overflow-hidden bg-custom-very-soft-blue bg-[url('/svg/BG.svg')] bg-no-repeat bg-cover">
                <div className='bg-custom-light-grayish-blue bg-[url("/svg/BG.svg")]  p-10 rounded-lg shadow-md z-50 flex flex-col items-center justify-center h-[37em] md:h-[25em] md:flex-row md:w-auto w-[97%] '>
                    <LoginBoxImage />
                    <LoginBox />
                </div>
            </main>
        </AllContextsProvider>
    );
}

// File: components/unauthorized/login/Login.model.ts

export interface IUser {
  id?: string;
  email?: string;
}
// File: components/unauthorized/login/login-box/LoginBox.tsx
import Link from 'next/link';
import { Context_email, Context_password, Context_error, Context_loggedInSuccessfully } from "@/components/unauthorized/login/Login.component"
import { useContext } from 'react';

export default function LoginBox() {

	const emailContext = useContext(Context_email);
	const passwordContext = useContext(Context_password);
	const errorContext = useContext(Context_error);
	const loggedInSuccessfullyContext = useContext(Context_loggedInSuccessfully);

	const { email, setEmail } = emailContext || { email: '', setEmail: (value: string) => {} };
	const { password, setPassword } = passwordContext || { password: '', setPassword: (value: string) => {} };
	const { error, setError } = errorContext || { error: '', setError: (value: string) => {} };
	const { loggedInSuccessfully, setLoggedInSuccessfully } = loggedInSuccessfullyContext || { loggedInSuccessfully: '', setLoggedInSuccessfully: (value: string) => {} };

	return (
		<div className="pt-8 rounded-lg  w-auto max-w-80 z-50 relative flex-col items-center justify-center">
			{error && (
				<p className="mb-4 text-sm font-bold text-red-500 absolute top-0 left-1/2 transform -translate-x-1/2 w-full text-center">
					{error}
				</p>
			)}
			{loggedInSuccessfully && (
				<p className="mb-4 text-sm font-bold text-green-500 absolute top-0 left-1/2 transform -translate-x-1/2 w-full text-center">
					{loggedInSuccessfully}
				</p>
			)}

			<input
				type="email"
				name="email"
				value={email}
				onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}
				placeholder="Email"
				className="mb-4 w-full p-3 rounded-md border border-custom-dark-desaturated-blue bg-white/50 text-custom-dark-desaturated-blue placeholder-gray-500 focus:outline-none focus:border-blue-500"
			/>
			<input
				type="password"
				name="password"
				value={password}
				onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}
				placeholder="Password"
				className="mb-4 w-full p-3 rounded-md border border-custom-dark-desaturated-blue bg-white/50  text-custom-dark-desaturated-blue placeholder-gray-500 focus:outline-none focus:border-blue-500"
			/>
			<button
				onClick={() => {}}
				className="w-full mb-2 p-3 rounded-md bg-custom-dark-desaturated-blue text-white hover:bg-gray-600 focus:outline-none"
			>
				Sign In
			</button>
			<h1 className='text-custom-dark-desaturated-blue text-center text-sm pt-2'>Don&apos;t have account? <Link className='text-custom-lark-blue' href={'/signup'}>SignUp</Link></h1>
			<h1 className='text-custom-dark-desaturated-blue text-center text-sm pt-2'>Forgot Password? <Link className='text-custom-lark-blue' href={'/forgot-password'}>Reset</Link></h1>
		</div>
	);

};
// File: components/unauthorized/login/login-box-image/LoginBoxImage.tsx
import Image from 'next/image';
import COVO_LOGOGRAM_BLACKs from "@/assets/images/COVO_LOGOGRAM_BLACK.png"


export default function LoginBoxImage() {
	return (
		<div className="flex items-center justify-center w-[390px] md">
			<div className='w-[300px] h-[120px] md:w-[400px] md:h-[400px] flex items-center justify-center'>
				<Image src={COVO_LOGOGRAM_BLACKs} alt="Logo" width={300} height={300} />
			</div>
		</div>
	);
};

// File: components/unauthorized/navbar/navbar-button.tsx
import { LucideIcon } from 'lucide-react';
import { Button, ButtonProps } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { SheetClose } from '@/components/ui/sheet';

interface NavbarButtonProps extends ButtonProps {
  icon?: LucideIcon;
}

export function NavbarButton({
  icon: Icon,
  className,
  children,
  ...props
}: NavbarButtonProps) {
  return (
    <Button
      variant='ghost'
      className={cn('gap-4 text-lg justify-start text-custom-dark-gray hover:text-custom-light-apricot', className)}
      {...props}
    >
      {Icon && <Icon size={20} />}
      <span>{children}</span>
    </Button>
  );
}

export function NavbarButtonSheet(props: NavbarButtonProps) {
  return (
    <SheetClose asChild>
      <NavbarButton {...props} />
    </SheetClose>
  );
}
// File: components/unauthorized/navbar/navbar.tsx
"use client";
import { Info, Search, Home, List, Hotel } from "lucide-react";
import { NavbarDes } from "./navbarDes";
import { NavbarItems } from "@/types";
import { NavbarMob } from "./navbarMob";

const navbarItems: NavbarItems = {
  links: [
    { label: "Home", href: "/#home" },
    { label: "About", href: "/#about" },
    { label: "Benefits", href: "/#benefits" },
    { label: "Features", href: "/#features" },
    { label: "FAQ", href: "/#faq" },
    { label: "Pricing", href: "/#pricing" },
    { label: "Contact", href: "#contact" },
  ],

};

const navbarItemsMobile: NavbarItems = {
	links: [
		{ href: "/", icon: Home },
		{ href: "/", icon: Search },
		{ href: "/", icon: Hotel },
		{ href: "/", icon: Hotel },
		{ href: "/", icon: Info },
		{ href: "/", icon: List },
	],
};

export function Navbar() {
	return (
		<div className="h-[100px]">
			<NavbarDes navbarItems={navbarItems} />
			<NavbarMob navbarItems={navbarItemsMobile} />
		</div>
	);


}

// File: components/unauthorized/navbar/navbarDes.tsx
import { NavbarButton } from "./navbar-button";
import { NavbarItems } from "@/types";
import Link from "next/link";
import {
	Popover,
	PopoverContent,
	PopoverTrigger,
} from "@/components/ui/popover";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { LogOut, UserCog, UserRoundPlus } from "lucide-react";
import { usePathname } from "next/navigation";
import React from "react";

interface NavbarProps {
	navbarItems: NavbarItems;
}

export function NavbarDes(props: NavbarProps) {
	const pathname = usePathname();

	return (
		/* navbar */
		<aside className="w-full fixed z-50 bg-custom-light-grayish-blue2/70 hidden lg:block">
			<div className="h-[100px] flex justify-between items-center mx-[70px]">
				{/* logo */}
				<Image
					src="/images/COVO_LOGOGRAM_BLACK.png"
					alt="logo"
					className=" opacity-[0.8]"
					width={200}
					height={100}
					priority
				/>

				{/* links of the pages */}
				<div className="flex flex-row gap-1 ">
					{props.navbarItems.links.map((link, index) => (
						<Link key={index} href={link.href}>
							<NavbarButton
								variant={"none"}
								className={`w-full ${
									pathname === link.href ? "text-custom-dark-gray" : ""
								}`}
								icon={link.icon}
							>
								{link.label}
							</NavbarButton>
						</Link>
					))}
				</div>

				{/* user profile */}
				<div className=" px-3 bg-custom-dark">
					<Popover>
						<PopoverTrigger asChild>
							<Button
								variant="none"
								className="h-auto w-auto flex justify-center items-center scale-[2]"
							>
								<UserCog size={80} />
							</Button>
						</PopoverTrigger>

						<PopoverContent className="mb-2 w-56 p-3 rounded-sm mr-[80px] ">
							<div className="space-y-1 text-black">
								<Link href="/login">
									<NavbarButton
										size="sm"
										className="group w-full hover:bg-custom-dark-gray"
									>
										<div className="flex justify-between ">
											<LogOut
												className="group-hover:text-custom-light-apricot text-black mt-[5px]"
												size={20}
											/>
											<p
												className={`text-black group-hover:text-custom-light-apricot pl-2`}
											>
												Log In
											</p>
										</div>
									</NavbarButton>
								</Link>
								<Link href="/signup">
									<NavbarButton
										size="sm"
										className="group w-full hover:bg-custom-dark-gray"
									>
										<div className="flex justify-between ">
											<UserRoundPlus
												className="group-hover:text-custom-light-apricot text-black mt-[5px]"
												size={20}
											/>
											<p
												className={`text-black group-hover:text-custom-light-apricot pl-2`}
											>
												Sign Up
											</p>
										</div>
									</NavbarButton>
								</Link>
							</div>
						</PopoverContent>
					</Popover>
				</div>
			</div>
		</aside>
	);
}

// File: components/unauthorized/navbar/navbarMob.tsx
import { NavbarButton } from "./navbar-button";
import { NavbarItems } from "@/types";
import Link from "next/link";
import {
	Popover,
	PopoverContent,
	PopoverTrigger,
} from "@/components/ui/popover";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { LogOut, UserCog, UserRoundPlus } from "lucide-react";
import { usePathname } from "next/navigation";
import React from "react";

interface NavbarProps {
	navbarItems: NavbarItems;
}

export function NavbarMob(props: NavbarProps) {
	const pathname = usePathname();

	return (
		/* navbar */
		<aside className="w-full fixed z-50 bg-custom-light-grayish-blue2/70  lg:hidden">
			<div className="h-[100px] flex justify-between items-center ">
				{/* logo */}
				<Image
					src="/images/COVO_LOGOGRAM_BLACK.png"
					alt="logo"
					className=" opacity-[0.8]"
					width={200}
					height={100}
					priority
				/>

				{/* links of the pages */}
				<div className="flex flex-row gap-1 ">
					{props.navbarItems.links.map((link, index) => (
						<Link key={index} href={link.href}>
							<NavbarButton
								variant={"none"}
								className={`w-full ${
									pathname === link.href ? "text-custom-dark-gray" : ""
								}`}
								icon={link.icon}
							>
								{link.label}
							</NavbarButton>
						</Link>
					))}
				</div>

				{/* user profile */}
				<div className=" px-3 bg-custom-dark">
					<Popover>
						<PopoverTrigger asChild>
							<Button
								variant="none"
								className="h-auto w-auto flex justify-center items-center scale-[2]"
							>
								<UserCog size={80} />
							</Button>
						</PopoverTrigger>

						<PopoverContent className="mb-2 w-56 p-3 rounded-sm mr-[80px] ">
							<div className="space-y-1 text-black">
								<Link href="/login">
									<NavbarButton
										size="sm"
										className="group w-full hover:bg-custom-dark-gray"
									>
										<div className="flex justify-between ">
											<LogOut
												className="group-hover:text-custom-light-apricot text-black mt-[5px]"
												size={20}
											/>
											<p
												className={`text-black group-hover:text-custom-light-apricot pl-2`}
											>
												Log In
											</p>
										</div>
									</NavbarButton>
								</Link>
								<Link href="/signup">
									<NavbarButton
										size="sm"
										className="group w-full hover:bg-custom-dark-gray"
									>
										<div className="flex justify-between ">
											<UserRoundPlus
												className="group-hover:text-custom-light-apricot text-black mt-[5px]"
												size={20}
											/>
											<p
												className={`text-black group-hover:text-custom-light-apricot pl-2`}
											>
												Sign Up
											</p>
										</div>
									</NavbarButton>
								</Link>
							</div>
						</PopoverContent>
					</Popover>
				</div>
			</div>
		</aside>
	);
}

// File: components/unauthorized/signup/SignUp.component.tsx
// SignUp/page.tsx
'use client';
import { useState, createContext } from 'react';
import SignUpBoxImage from './signup-box-image/SignUpBoxImage';
import SignUpBox from './signup-box/SignUpBox';
import AllContextsProvider from '@/components/shared/AllContextsProvider';
import { IUser } from '@/components/unauthorized/signup/SignUp.model';
import { Navbar } from '../navbar/navbar';


/* sign up page */
export const Context_email = createContext(null);
export const Context_password = createContext(null);
export const Context_firstName = createContext(null);
export const Context_lastName = createContext(null);
export const Context_username = createContext(null);
export const Context_error = createContext(null);
export const Context_loggedInSuccessfully = createContext(null);



export default function SignUp() {

    /* SignUp page */
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [username, setUsername] = useState('');
    const [error, setError] = useState('');
    const [user, setUser] = useState<IUser | null>(null);
    const [loading, setLoading] = useState(true);
    const [loggedInSuccessfully, setLoggedInSuccessfully] = useState('');



    const contexts = [
        [Context_email, { email, setEmail }],
        [Context_password, { password, setPassword }],
        [Context_firstName, { firstName, setFirstName }],
        [Context_lastName, { lastName, setLastName }],
        [Context_username, { username, setUsername }],
        [Context_error, { error, setError }],
        [Context_loggedInSuccessfully, { loggedInSuccessfully, setLoggedInSuccessfully }],
    ];

    return (
        <AllContextsProvider contexts={contexts}>
            <main className="h-[calc(100dvh-100px)] flex items-center justify-center p-6 relative overflow-hidden bg-custom-very-soft-blue bg-[url('/svg/BG.svg')] bg-no-repeat bg-cover">
                <div className='bg-custom-light-grayish-blue bg-[url("/svg/BG.svg")] p-10 rounded-lg shadow-md z-50 flex flex-col items-center justify-center h-[37em] md:h-[25em] md:flex-row md:w-auto w-[97%] '>
                    <SignUpBoxImage />
                    <SignUpBox />
                </div>
            </main>
        </AllContextsProvider>
    );
}

// File: components/unauthorized/signup/SignUp.model.ts

export interface IUser {
  id?: string;
  email?: string;
}
// File: components/unauthorized/signup/signup-box/SignUpBox.tsx
import { Context_email, Context_password, Context_firstName, Context_lastName, Context_username, Context_error, Context_loggedInSuccessfully} from '../SignUp.component';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useContext } from 'react';

export default function SignUpBox() {
	const emailContext = useContext(Context_email);
	const passwordContext = useContext(Context_password);
	const firstNameContext = useContext(Context_firstName);
	const lastNameContext = useContext(Context_lastName);
	const usernameContext = useContext(Context_username);
	const errorContext = useContext(Context_error);
	const loggedInSuccessfullyContext = useContext(Context_loggedInSuccessfully);

	const { email, setEmail } = emailContext || { email: '', setEmail: (value: string) => {} };
	const { password, setPassword } = passwordContext || { password: '', setPassword: (value: string) => {} };
	const { firstName, setFirstName } = firstNameContext || { firstName: '', setFirstName: (value: string) => {} };
	const { lastName, setLastName } = lastNameContext || { lastName: '', setLastName: (value: string) => {} };
	const { username, setUsername } = usernameContext || { username: '', setUsername: (value: string) => {} };
	const { error, setError } = errorContext || { error: '', setError: (value: string) => {} };
	const { loggedInSuccessfully, setLoggedInSuccessfully } = loggedInSuccessfullyContext || { loggedInSuccessfully: '', setLoggedInSuccessfully: (value: string) => {} };


	const handleSignUp = async () => {};

	return (
		<div className="pt-8 rounded-lg  w-auto max-w-80 z-50 relative flex-col items-center justify-center">
			{error && (
				<p className="mb-4 text-sm font-bold text-red-500 absolute top-0 left-1/2 transform -translate-x-1/2 w-full text-center">
					{error}
				</p>
			)}
			{loggedInSuccessfully && (
				<p className="mb-4 text-sm font-bold text-green-500 absolute top-0 left-1/2 transform -translate-x-1/2 w-full text-center">
					{loggedInSuccessfully}
				</p>
			)}
			<div className='w-auto  flex justify-between'>
				<input
					type="text"
					name="firstName"
					value={firstName}
					onChange={(e) => setFirstName(e.target.value)}
					placeholder="First Name"
					className="mr-1 mb-4 w-full p-3 rounded-md border border-custom-dark-desaturated-blue bg-white/50 placeholder-gray-500 focus:outline-none focus:border-blue-500"
				/>
				<input
					type="text"
					name="lastName"
					value={lastName}
					onChange={(e) => setLastName(e.target.value)}
					placeholder="Last Name"
					className="ml-1 mb-4 w-full p-3 rounded-md border border-custom-dark-desaturated-blue bg-white/50 placeholder-gray-500 focus:outline-none focus:border-blue-500"
				/>
			</div>
			<input
				type="text"
				name="username"
				value={username}
				onChange={(e) => setUsername(e.target.value)}
				placeholder="Username"
				className="mb-4 w-full p-3 rounded-md border border-custom-dark-desaturated-blue bg-white/50 placeholder-gray-500 focus:outline-none focus:border-blue-500"
			/>
			<input
				type="email"
				name="email"
				value={email}
				onChange={(e) => setEmail(e.target.value)}
				placeholder="Email"
				className="mb-4 w-full p-3 rounded-md border border-custom-dark-desaturated-blue bg-white/50 placeholder-gray-500 focus:outline-none focus:border-blue-500"
			/>
			<input
				type="password"
				name="password"
				value={password}
				onChange={(e) => setPassword(e.target.value)}
				placeholder="Password"
				className="mb-4 w-full p-3 rounded-md border border-custom-dark-desaturated-blue bg-white/50 placeholder-gray-500 focus:outline-none focus:border-blue-500"
			/>
			<button
				onClick={handleSignUp}
				className="w-full mb-2 p-3 rounded-md bg-custom-dark-desaturated-blue text-white hover:bg-gray-600 focus:outline-none"
			>
				Sign Up
			</button>
			<h1 className='text-custom-dark-desaturated-blue text-center text-sm pt-2'>Already have an account? <Link className='text-custom-lark-blue' href={'/login'}>Login</Link></h1>
		</div>
	)

}
// File: components/unauthorized/signup/signup-box-image/SignUpBoxImage.tsx
import Image from 'next/image';
import COVO_LOGOGRAM_BLACKs from "@/assets/images/COVO_LOGOGRAM_BLACK.png"


export default function SignUpBoxImage() {
	return (
		<div className="flex items-center justify-center w-[390px] md">
			<div className='w-[300px] h-[120px] md:w-[400px] md:h-[400px] flex items-center justify-center'>
				<Image src={COVO_LOGOGRAM_BLACKs} alt="Logo" width={300} height={300} />
			</div>
		</div>
	);
};

// File: app/(authorized)/dashboard/page.tsx


export default function Page() {

  return (
    <div></div>
  )
}

// File: app/(authorized)/layout.tsx
import type { Metadata } from "next";
import localFont from "next/font/local";
import "../globals.css";
import {Roboto} from "next/font/google";
import { SideBarLayout } from "@/components/authorized/side-bar/SideBar.component";

const roboto = Roboto({weight: ["100", "300", "400", "500", "700", "900"], subsets: ["latin"]});

const geistSans = localFont({
  src: "../fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "../fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
      <section className={`${geistSans.variable} ${geistMono.variable} antialiased ${roboto.className}`}>
        <SideBarLayout>{children}</SideBarLayout>
      </section>
  );
}

// File: app/(authorized)/messages/page.tsx
import MessagesComponent from "@/components/authorized/messages/Message.components";

export default function MessagePage() {

  return (
    <MessagesComponent />
  )
}

// File: app/(unauthorized)/landingpage/page.tsx
import LandingPagePage from '@/components/unauthorized/landing-page/LandingPage.page';
export default function LandingPage() {

  return (
    <LandingPagePage />
  );

}
// File: app/(unauthorized)/layout.tsx
import Footer from '@/components/unauthorized/footer/Footer.page';
import { Navbar } from '@/components/unauthorized/navbar/navbar';

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <section >
      <Navbar />
      {children}
      <Footer />
    </section>
  );
}

// File: app/(unauthorized)/login/page.tsx
import Login from "@/components/unauthorized/login/Login.component"

export default function LoginPage() {
  return (<Login />)
}
// File: app/(unauthorized)/signup/page.tsx
import SignUp from "@/components/unauthorized/signup/SignUp.component"

export default function SignUpPage() {
  return (<SignUp />)
}
// File: app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

html {
  scroll-behavior: smooth;
}
:root {
  scroll-padding-top: 100px; /* Adjust based on your navbar height */
}
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 20 14.3% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 20 14.3% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 20 14.3% 4.1%;
    --primary: 24 9.8% 10%;
    --primary-foreground: 60 9.1% 97.8%;
    --secondary: 60 4.8% 95.9%;
    --secondary-foreground: 24 9.8% 10%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --accent: 60 4.8% 95.9%;
    --accent-foreground: 24 9.8% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --ring: 20 14.3% 4.1%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 20 14.3% 4.1%;
    --foreground: 60 9.1% 97.8%;
    --card: 20 14.3% 4.1%;
    --card-foreground: 60 9.1% 97.8%;
    --popover: 20 14.3% 4.1%;
    --popover-foreground: 60 9.1% 97.8%;
    --primary: 60 9.1% 97.8%;
    --primary-foreground: 24 9.8% 10%;
    --secondary: 12 6.5% 15.1%;
    --secondary-foreground: 60 9.1% 97.8%;
    --muted: 12 6.5% 15.1%;
    --muted-foreground: 24 5.4% 63.9%;
    --accent: 12 6.5% 15.1%;
    --accent-foreground: 60 9.1% 97.8%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 12 6.5% 15.1%;
    --input: 12 6.5% 15.1%;
    --ring: 24 5.7% 82.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

// File: app/layout.tsx
// Layout in the root of @/app contains only information about fonts and meta-data

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import {Roboto} from "next/font/google";

const roboto = Roboto({weight: ["100", "300", "400", "500", "700", "900"], subsets: ["latin"]});

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased ${roboto.className}`}
      >

        {children}

      </body>
    </html>
  );
}

// File: app/page.tsx
import { redirect } from 'next/navigation';

export default function Home() {
  redirect('/landingpage');
}

// File: hooks/use-mobile.tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

